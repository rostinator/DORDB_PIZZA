-- pomocné datové type pro položky objednávky
create or replace type item_typ as object(pizza_id integer, amount integer);
create or replace type order_items as table of item_typ;

CREATE OR REPLACE PACKAGE pizza_orders_api AS
    PROCEDURE create_order (
        p_customer_id IN INTEGER,
        p_address_id  IN INTEGER,
        p_first_name  IN customer.first_name%TYPE,
        p_last_name   IN customer.last_name%TYPE,
        p_email       IN customer.email%TYPE,
        p_phone       IN customer.phone%TYPE,
        p_postal_code IN address.postal_code%TYPE,
        p_city        IN address.city%TYPE,
        p_street      IN address.street%TYPE,
        p_items       IN order_items
    );

    PROCEDURE register_customer (
        p_username   IN userz.username%TYPE,
        p_password   IN userz.password%TYPE,
        p_first_name IN customer.first_name%TYPE,
        p_last_name  IN customer.last_name%TYPE,
        p_email      IN customer.email%TYPE,
        p_phone      IN customer.phone%TYPE
    );
    
    function calculate_order_price(order_id integer) return number;

END;
/
CREATE OR REPLACE PACKAGE BODY pizza_orders_api AS

    PROCEDURE create_order (
        p_customer_id INTEGER,
        p_address_id  INTEGER,
        p_first_name  customer.first_name%TYPE,
        p_last_name   customer.last_name%TYPE,
        p_email       customer.email%TYPE,
        p_phone       customer.phone%TYPE,
        p_postal_code address.postal_code%TYPE,
        p_city        address.city%TYPE,
        p_street      address.street%TYPE,
        p_items       IN order_items
    ) IS
        customer_id INTEGER;
        address_id  INTEGER;
        order_id    INTEGER;
    BEGIN
        IF p_customer_id IS NULL THEN
            customer_id := customer_seq.nextval;
            INSERT INTO customer (id, first_name, last_name, email, phone) VALUES (customer_id, p_first_name, p_last_name, p_email, p_phone);
        ELSE
            customer_id := p_customer_id;
        END IF;

        IF p_address_id IS NULL THEN
            address_id := address_seq.nextval;
            INSERT INTO address (id, postal_code, city, street) VALUES (address_id, p_postal_code, p_city, p_street);
        ELSE
            address_id := p_address_id;
        END IF;

        order_id := orders_seq.nextval;
        INSERT INTO orders (id, price, status, customer_id, address_id) VALUES (order_id, 1, 'CREATED', customer_id, address_id);
        
        FOR i IN p_items.first..p_items.last LOOP
            INSERT INTO pizza_order (pizza_id, orders_id, amount) VALUES (p_items(i).pizza_id, order_id, p_items(i).amount);
        END LOOP;
        
        update orders
        set price = calculate_order_price(order_id)
        where id = order_id;
        
    END;

    PROCEDURE register_customer(
        p_username   IN userz.username%TYPE,
        p_password   IN userz.password%TYPE,
        p_first_name IN customer.first_name%TYPE,
        p_last_name  IN customer.last_name%TYPE,
        p_email      IN customer.email%TYPE,
        p_phone      IN customer.phone%TYPE
    ) IS
        final_username userz.username%TYPE;
        customer_id INTEGER;
        customer_record INTEGER;
        password_hash VARCHAR2(255);
        old_phone customer.phone%TYPE;
    BEGIN
        IF (p_username IS NULL OR LENGTH(p_username) < 1) THEN
            IF (p_email IS NULL OR LENGTH(p_email) > 50) THEN
                raise_application_error(-20011, 'Nelze zaregistrovat uzivatele - chybne prihlasovaci jmeno');
            END IF;
            final_username := p_email;
        ELSE
            final_username := p_username;
        END IF;
        
        IF (p_password IS NULL OR LENGTH(p_password) < 8) THEN
            raise_application_error(-20011, 'Nelze zaregistrovat uzivatele - neplatné heslo');
        END IF;
        
        select count(*) into customer_record from customer where first_name = p_first_name and last_name = p_last_name and email = p_email;
        
        IF customer_record > 0 THEN
            select id, phone into customer_id, old_phone from customer where email = p_email;
        ELSE
            customer_id := customer_seq.nextval;
            old_phone := p_phone;
            INSERT INTO customer (id, first_name, last_name, email, phone) VALUES (customer_id, p_first_name, p_last_name, p_email, p_phone);
        END IF;
        
        IF old_phone <> p_phone THEN
            update customer
            set phone = p_phone
            where email = p_email;
        END IF;
        
        insert into userz (id, username, password, role, customer_id) VALUES (user_seq.nextval, final_username, p_password, 'CUSTOMER', customer_id);
        
    END;
    
    FUNCTION calculate_order_price(order_id INTEGER) RETURN NUMBER
    IS
        order_price NUMBER;
    BEGIN
        SELECT SUM(po.amount * p.price)
        INTO order_price
        FROM pizza_order po
        JOIN pizza p ON po.pizza_id = p.id
        WHERE po.orders_id = order_id;

        RETURN order_price;
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            raise_application_error(-20010, 'Nelze vytvorit objednavku bez polozek');
    END;

END;